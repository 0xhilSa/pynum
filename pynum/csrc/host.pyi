# all the functions are defined at `./host.c`

from typing import List, Any

def array(array1D:List[Any], fmt:str) -> List[Any]: ...
def toList(pointer:Any, length:int, fmt:str) -> List: ...
def getitem_index(pointer:Any, length:int, index:int, fmt:str) -> Any: ...
def getitem_slice(pointer:Any, length:int, start:int, stop:int, step:int, fmt:str) -> Any: ...
def setitem_index(pointer:Any, value:Any, length:int, index:int, fmt:str) -> None: ...
def setitem_slice(pointer:Any, values:List[Any], length:int, start:int, stop:int, step:int, fmt:str) -> None: ...

# arithmetic ops
def add_vector(pointer1:Any, pointer2:Any, length1:int, length2:int, fmt1:str, fmt2:str) -> Any: ...
def sub_vector(pointer1:Any, pointer2:Any, length1:int, length2:int, fmt1:str, fmt2:str) -> Any: ...
def mul_vector(pointer1:Any, pointer2:Any, length1:int, length2:int, fmt1:str, fmt2:str) -> Any: ...
def div_vector(pointer1:Any, pointer2:Any, length1:int, length2:int, fmt1:str, fmt2:str) -> Any: ...
def pow_vector(pointer1:Any, pointer2:Any, length1:int, length2:int, fmt1:str, fmt2:str) -> Any: ...

# bitwise ops
def bitwise_and_vector(pointer1:Any, pointer2:Any, length1:int, length2:int, fmt1:str, fmt2:str) -> Any: ...
def bitwise_or_vector(pointer1:Any, pointer2:Any, length1:int, length2:int, fmt1:str, fmt2:str) -> Any: ...
def bitwise_not_vector(pointer:Any,length:int,fmt:str) -> Any: ...
def bitwise_xor_vector(pointer1:Any, pointer2:Any, length1:int, length2:int, fmt1:str, fmt2:str) -> Any: ...
